{"ast":null,"code":"var _jsxFileName = \"/home/claudio/Documentos/Rocketseat/ignite-template-reactjs-criando-um-hook-de-carrinho-de-compras/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { api } from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  const [cart, setCart] = useState(() => {\n    const storagedCart = localStorage.getItem(\"@RocketShoes:cart\");\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async productId => {\n    try {\n      const newCart = [...cart];\n      const productExists = cart.find(product => product.id === productId);\n      const {\n        data\n      } = await api.get(`/stock/${productId}`);\n\n      if (data.amount < 1) {\n        throw new Error();\n      }\n\n      if (productExists) {\n        newCart[productId].amount += 1;\n        return;\n      }\n\n      newCart.push({ ...data,\n        amount: 1\n      });\n    } catch {\n      toast.error(\"Quantidade solicitada fora de estoque\");\n    }\n  };\n\n  const removeProduct = productId => {\n    try {// TODO\n    } catch {// TODO\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    try {// TODO\n    } catch {// TODO\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"WanC+H4F5XAlaEUwRPGCePnR438=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/claudio/Documentos/Rocketseat/ignite-template-reactjs-criando-um-hook-de-carrinho-de-compras/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","toast","api","CartContext","CartProvider","children","cart","setCart","storagedCart","localStorage","getItem","JSON","parse","addProduct","productId","newCart","productExists","find","product","id","data","get","amount","Error","push","error","removeProduct","updateProductAmount","useCart","context"],"mappings":";;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,QAA/C,QAA+D,OAA/D;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,SAASC,GAAT,QAAoB,iBAApB;;AAmBA,MAAMC,WAAW,gBAAGL,aAAa,CAAkB,EAAlB,CAAjC;AAEA,OAAO,SAASM,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoE;AAAA;;AACzE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAY,MAAM;AAChD,UAAMQ,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAArB;;AAEA,QAAIF,YAAJ,EAAkB;AAChB,aAAOG,IAAI,CAACC,KAAL,CAAWJ,YAAX,CAAP;AACD;;AAED,WAAO,EAAP;AACD,GAR+B,CAAhC;;AAUA,QAAMK,UAAU,GAAG,MAAOC,SAAP,IAA6B;AAC9C,QAAI;AACF,YAAMC,OAAO,GAAG,CAAC,GAAGT,IAAJ,CAAhB;AACA,YAAMU,aAAa,GAAGV,IAAI,CAACW,IAAL,CAAWC,OAAD,IAAaA,OAAO,CAACC,EAAR,KAAeL,SAAtC,CAAtB;AAEA,YAAM;AAAEM,QAAAA;AAAF,UAAW,MAAMlB,GAAG,CAACmB,GAAJ,CAAkB,UAASP,SAAU,EAArC,CAAvB;;AAEA,UAAIM,IAAI,CAACE,MAAL,GAAc,CAAlB,EAAqB;AACnB,cAAM,IAAIC,KAAJ,EAAN;AACD;;AAED,UAAIP,aAAJ,EAAmB;AACjBD,QAAAA,OAAO,CAACD,SAAD,CAAP,CAAmBQ,MAAnB,IAA6B,CAA7B;AACA;AACD;;AACDP,MAAAA,OAAO,CAACS,IAAR,CAAa,EAAE,GAAGJ,IAAL;AAAWE,QAAAA,MAAM,EAAE;AAAnB,OAAb;AACD,KAfD,CAeE,MAAM;AACNrB,MAAAA,KAAK,CAACwB,KAAN,CAAY,uCAAZ;AACD;AACF,GAnBD;;AAqBA,QAAMC,aAAa,GAAIZ,SAAD,IAAuB;AAC3C,QAAI,CACF;AACD,KAFD,CAEE,MAAM,CACN;AACD;AACF,GAND;;AAQA,QAAMa,mBAAmB,GAAG,OAAO;AACjCb,IAAAA,SADiC;AAEjCQ,IAAAA;AAFiC,GAAP,KAGD;AACzB,QAAI,CACF;AACD,KAFD,CAEE,MAAM,CACN;AACD;AACF,GATD;;AAWA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAAEhB,MAAAA,IAAF;AAAQO,MAAAA,UAAR;AAAoBa,MAAAA,aAApB;AAAmCC,MAAAA;AAAnC,KADT;AAAA,cAGGtB;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GA1DeD,Y;;KAAAA,Y;AA4DhB,OAAO,SAASwB,OAAT,GAAoC;AAAA;;AACzC,QAAMC,OAAO,GAAG9B,UAAU,CAACI,WAAD,CAA1B;AAEA,SAAO0B,OAAP;AACD;;IAJeD,O","sourcesContent":["import { createContext, ReactNode, useContext, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { CartItemsAmount } from \"../pages/Home\";\nimport { api } from \"../services/api\";\nimport { Product, Stock } from \"../types\";\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n  const [cart, setCart] = useState<Product[]>(() => {\n    const storagedCart = localStorage.getItem(\"@RocketShoes:cart\");\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async (productId: number) => {\n    try {\n      const newCart = [...cart];\n      const productExists = cart.find((product) => product.id === productId);\n\n      const { data } = await api.get<Product>(`/stock/${productId}`);\n\n      if (data.amount < 1) {\n        throw new Error();\n      }\n\n      if (productExists) {\n        newCart[productId].amount += 1;\n        return;\n      }\n      newCart.push({ ...data, amount: 1 });\n    } catch {\n      toast.error(\"Quantidade solicitada fora de estoque\");\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n      // TODO\n    } catch {\n      // TODO\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n      // TODO\n    } catch {\n      // TODO\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}